/users:
  get:
    summary: Get all users
    description: Retrieves a list of all users.
    operationId: getAllUsers
    security:
      - bearerAuth: []
    tags:
      - Users
    responses:
      200:
        description: List of all users
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  dateOfBirth:
                    type: string
                  phoneNumber:
                    type: string
                  address:
                    type: string
                  qualification:
                    type: string
                  profilePic:
                    type: string
                  accountStatus:
                    type: string
                  lastLogin:
                    type: string
                  roleId:
                    type: integer
      404:
        description: No users found
        content:
          application/json:
            schema:
              type: object
              properties:
                 message:
                  type: string
                  example: "No users found"
      500:
        description: Server error
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Error occurred while retrieving users"
                error:
                  type: string

  post:
    summary: Create a new user
    description: Creates a new user with provided details.
    operationId: createUser
    security:
      - bearerAuth: []
    tags:
      - Users
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                example: Ram
              lastName:
                type: string
                example: M
              email:
                type: string
                example: Ram.M@example.com
              phoneNumber:
                type: string
                example: "1234567890"
              password:
                type: string
                example: "strongpassword123"
                format: date
                example: "2023-01-01"
              roleId:
                type: integer
                example: 1
    responses:
      200:
        description: User created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: User created successfully
                newUser:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                    phoneNumber:
                      type: string
                    roleId:
                      type: integer
      500:
        description: User creation error
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Error occurred while creating the user"
                error:
                  type: string
      401:
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Unauthorized request        


/users/{id}:
  put:
    summary: Update a user
    description: Updates the information of a user by ID.
    operationId: updateUser
    security:
      - bearerAuth: []
    tags:
      - Users
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the user to update
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                example: Jane
              lastName:
                type: string
                example: Doe
              email:
                type: string
                example: jane.doe@example.com
              phoneNumber:
                type: string
                example: "0987654321"
              address:
                type: string
                example: "123 Main St."
              qualification:
                type: string
                example: "BSc Computer Science"
              profilePic:
                type: string
                example: "profilepic.jpg"
              roleId:
                type: integer
                example: 2
              accountStatus:
                type: string
                example: "active"
    responses:
      200:
        description: User updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User updated successfully"
                user:
                  type: object
                  properties:
                    id:
                      type: integer
      404:
        description: User not found
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User not found"
      500:
        description: Server error
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Error occurred while updating user"
                error:
                  type: string

  delete:
    summary: Delete a user
    description: Deletes a user by ID.
    operationId: deleteUser
    security:
      - bearerAuth: []
    tags:
      - Users
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the user to delete
        schema:
          type: integer
    responses:
      200:
        description: User deleted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User deleted successfully"
      404:
        description: User not found
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User not found"
      500:
        description: Server error
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Error occurred while deleting user"
                error:
                  type: string

  get:
    summary: Get a user by ID
    description: Retrieves the details of a specific user by ID.
    operationId: getUserById
    security:
      - bearerAuth: []
    tags:
      - Users
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the user to retrieve
        schema:
          type: integer
          example: 1
    responses:
      200:
        description: User details retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                    phoneNumber:
                      type: string
                    dateOfBirth:
                      type: string
                    address:
                      type: string
                    qualification:
                      type: string
                    profilePic:
                      type: string
                    roleId:
                      type: string
                    accountStatus:
                      type: string
      404:
        description: User not found
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User not found"
      500:
        description: Server error
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Error occurred while retrieving user"
                error:
                  type: string
